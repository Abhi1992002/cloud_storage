// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  role                  UserRole               @default(USER)
  image                 String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  storageUsed           Float?                 @default(0)
  Folders               Folders[]
  Files                 Files[]
}

model VerficationToken {
  id     String   @id @default(cuid())
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id     String   @id @default(cuid())
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id     String   @id @default(cuid())
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Folders {
  id     String @id @default(cuid())
  name   String
  color  String
  icon   String
  userId String

  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Files     Files[]
}

model Files {
  id          String   @id @default(cuid())
  name        String
  size        Float
  type        String
  uploadedAt  DateTime @default(now())
  downloadUrl String
  isTrashed   Boolean  @default(false)
  isStarred   Boolean  @default(false)
  url         String

  folderId String
  folders  Folders @relation(fields: [folderId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
